# -*- coding: utf-8 -*-
"""House Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10g-PoU1Df-JWaD5Mt9DCA1escGAbnWyS
"""

# Commented out IPython magic to ensure Python compatibility.
  #Generic libraries
  import pandas as pd
  import matplotlib.pyplot as plt
  import numpy as np
  import seaborn as sns
  import mpl_toolkits
#   %matplotlib inline
  #Data set

#get the data set
data = pd.read_csv("kc_house_data.csv")

data.head()

data.describe()

type(data['bedrooms'].value_counts())

data['bedrooms'].value_counts().plot(kind='bar')
plt.title('number of Bedroom')
plt.xlabel('Bedrooms')
plt.ylabel('Count')
sns.despine

plt.figure(figsize=(10,10))
sns.jointplot(x=data.lat.values, y=data.long.values, size=10)
plt.ylabel('Longitude', fontsize=12)
plt.xlabel('Latitude', fontsize=12)
plt.show()

sns.despine

plt.scatter(data.price, data.sqft_living)
plt.title("Price vs Square Feet")

plt.scatter(data.price,data.long)
plt.title("Price vs Location of the area")

plt.scatter(data.price,data.lat)
plt.xlabel("Price")
plt.ylabel("Latitude")
plt.title("Latitude vs Price")

plt.scatter(data.bedrooms,data.price)
plt.title("Bedroom and Price ")
plt.xlabel("Bedrooms")
plt.ylabel("Price")
plt.show()
sns.despine

plt.scatter((data['sqft_living']+data['sqft_basement']),data['price'])

plt.scatter(data.waterfront,data.price)
plt.title("Waterfront vs Price ( 0= no waterfront)")

train1 = data.drop(['id','price'],axis=1)

train1.head()

data.floors.value_counts().plot(kind='bar')

plt.scatter(data.floors,data.price)

from sklearn.linear_model import LinearRegression

reg = LinearRegression()

labels = data['price']
print(labels)
conv_dates = [1 if values == 2014 else 0 for values in data.date]
data['date'] = conv_dates
train1 = data.drop(['id','price'],axis=1)

train1.head()

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(train1 , labels , test_size = 0.10)

reg.fit(x_train,y_train)

x_test.head(1)

reg.predict(x_test[0:1])

reg.score(x_test,y_test)

